// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"us-soccer-go-test/internal/ent/predicate"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WeatherUpdate is the builder for updating Weather entities.
type WeatherUpdate struct {
	config
	hooks     []Hook
	mutation  *WeatherMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WeatherUpdate builder.
func (wu *WeatherUpdate) Where(ps ...predicate.Weather) *WeatherUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdateTime sets the "update_time" field.
func (wu *WeatherUpdate) SetUpdateTime(t time.Time) *WeatherUpdate {
	wu.mutation.SetUpdateTime(t)
	return wu
}

// SetTemperature sets the "temperature" field.
func (wu *WeatherUpdate) SetTemperature(f float64) *WeatherUpdate {
	wu.mutation.ResetTemperature()
	wu.mutation.SetTemperature(f)
	return wu
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (wu *WeatherUpdate) SetNillableTemperature(f *float64) *WeatherUpdate {
	if f != nil {
		wu.SetTemperature(*f)
	}
	return wu
}

// AddTemperature adds f to the "temperature" field.
func (wu *WeatherUpdate) AddTemperature(f float64) *WeatherUpdate {
	wu.mutation.AddTemperature(f)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WeatherUpdate) SetDescription(s string) *WeatherUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WeatherUpdate) SetNillableDescription(s *string) *WeatherUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// SetIcon sets the "icon" field.
func (wu *WeatherUpdate) SetIcon(s string) *WeatherUpdate {
	wu.mutation.SetIcon(s)
	return wu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (wu *WeatherUpdate) SetNillableIcon(s *string) *WeatherUpdate {
	if s != nil {
		wu.SetIcon(*s)
	}
	return wu
}

// SetStadiumID sets the "stadium" edge to the Stadium entity by ID.
func (wu *WeatherUpdate) SetStadiumID(id uuid.UUID) *WeatherUpdate {
	wu.mutation.SetStadiumID(id)
	return wu
}

// SetNillableStadiumID sets the "stadium" edge to the Stadium entity by ID if the given value is not nil.
func (wu *WeatherUpdate) SetNillableStadiumID(id *uuid.UUID) *WeatherUpdate {
	if id != nil {
		wu = wu.SetStadiumID(*id)
	}
	return wu
}

// SetStadium sets the "stadium" edge to the Stadium entity.
func (wu *WeatherUpdate) SetStadium(s *Stadium) *WeatherUpdate {
	return wu.SetStadiumID(s.ID)
}

// Mutation returns the WeatherMutation object of the builder.
func (wu *WeatherUpdate) Mutation() *WeatherMutation {
	return wu.mutation
}

// ClearStadium clears the "stadium" edge to the Stadium entity.
func (wu *WeatherUpdate) ClearStadium() *WeatherUpdate {
	wu.mutation.ClearStadium()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WeatherUpdate) Save(ctx context.Context) (int, error) {
	if err := wu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WeatherUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WeatherUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WeatherUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WeatherUpdate) defaults() error {
	if _, ok := wu.mutation.UpdateTime(); !ok {
		if weather.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized weather.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := weather.UpdateDefaultUpdateTime()
		wu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wu *WeatherUpdate) check() error {
	if v, ok := wu.mutation.Description(); ok {
		if err := weather.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Weather.description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WeatherUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeatherUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WeatherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(weather.Table, weather.Columns, sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdateTime(); ok {
		_spec.SetField(weather.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := wu.mutation.Temperature(); ok {
		_spec.SetField(weather.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedTemperature(); ok {
		_spec.AddField(weather.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(weather.FieldDescription, field.TypeString, value)
	}
	if value, ok := wu.mutation.Icon(); ok {
		_spec.SetField(weather.FieldIcon, field.TypeString, value)
	}
	if wu.mutation.StadiumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weather.StadiumTable,
			Columns: []string{weather.StadiumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.StadiumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weather.StadiumTable,
			Columns: []string{weather.StadiumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weather.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WeatherUpdateOne is the builder for updating a single Weather entity.
type WeatherUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WeatherMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (wuo *WeatherUpdateOne) SetUpdateTime(t time.Time) *WeatherUpdateOne {
	wuo.mutation.SetUpdateTime(t)
	return wuo
}

// SetTemperature sets the "temperature" field.
func (wuo *WeatherUpdateOne) SetTemperature(f float64) *WeatherUpdateOne {
	wuo.mutation.ResetTemperature()
	wuo.mutation.SetTemperature(f)
	return wuo
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableTemperature(f *float64) *WeatherUpdateOne {
	if f != nil {
		wuo.SetTemperature(*f)
	}
	return wuo
}

// AddTemperature adds f to the "temperature" field.
func (wuo *WeatherUpdateOne) AddTemperature(f float64) *WeatherUpdateOne {
	wuo.mutation.AddTemperature(f)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WeatherUpdateOne) SetDescription(s string) *WeatherUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableDescription(s *string) *WeatherUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// SetIcon sets the "icon" field.
func (wuo *WeatherUpdateOne) SetIcon(s string) *WeatherUpdateOne {
	wuo.mutation.SetIcon(s)
	return wuo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableIcon(s *string) *WeatherUpdateOne {
	if s != nil {
		wuo.SetIcon(*s)
	}
	return wuo
}

// SetStadiumID sets the "stadium" edge to the Stadium entity by ID.
func (wuo *WeatherUpdateOne) SetStadiumID(id uuid.UUID) *WeatherUpdateOne {
	wuo.mutation.SetStadiumID(id)
	return wuo
}

// SetNillableStadiumID sets the "stadium" edge to the Stadium entity by ID if the given value is not nil.
func (wuo *WeatherUpdateOne) SetNillableStadiumID(id *uuid.UUID) *WeatherUpdateOne {
	if id != nil {
		wuo = wuo.SetStadiumID(*id)
	}
	return wuo
}

// SetStadium sets the "stadium" edge to the Stadium entity.
func (wuo *WeatherUpdateOne) SetStadium(s *Stadium) *WeatherUpdateOne {
	return wuo.SetStadiumID(s.ID)
}

// Mutation returns the WeatherMutation object of the builder.
func (wuo *WeatherUpdateOne) Mutation() *WeatherMutation {
	return wuo.mutation
}

// ClearStadium clears the "stadium" edge to the Stadium entity.
func (wuo *WeatherUpdateOne) ClearStadium() *WeatherUpdateOne {
	wuo.mutation.ClearStadium()
	return wuo
}

// Where appends a list predicates to the WeatherUpdate builder.
func (wuo *WeatherUpdateOne) Where(ps ...predicate.Weather) *WeatherUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WeatherUpdateOne) Select(field string, fields ...string) *WeatherUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Weather entity.
func (wuo *WeatherUpdateOne) Save(ctx context.Context) (*Weather, error) {
	if err := wuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WeatherUpdateOne) SaveX(ctx context.Context) *Weather {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WeatherUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WeatherUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WeatherUpdateOne) defaults() error {
	if _, ok := wuo.mutation.UpdateTime(); !ok {
		if weather.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized weather.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := weather.UpdateDefaultUpdateTime()
		wuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WeatherUpdateOne) check() error {
	if v, ok := wuo.mutation.Description(); ok {
		if err := weather.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Weather.description": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WeatherUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WeatherUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WeatherUpdateOne) sqlSave(ctx context.Context) (_node *Weather, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(weather.Table, weather.Columns, sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Weather.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, weather.FieldID)
		for _, f := range fields {
			if !weather.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != weather.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdateTime(); ok {
		_spec.SetField(weather.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.Temperature(); ok {
		_spec.SetField(weather.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedTemperature(); ok {
		_spec.AddField(weather.FieldTemperature, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(weather.FieldDescription, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Icon(); ok {
		_spec.SetField(weather.FieldIcon, field.TypeString, value)
	}
	if wuo.mutation.StadiumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weather.StadiumTable,
			Columns: []string{weather.StadiumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.StadiumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weather.StadiumTable,
			Columns: []string{weather.StadiumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Weather{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weather.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
