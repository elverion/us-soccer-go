// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"us-soccer-go-test/internal/ent/predicate"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStadium = "Stadium"
	TypeWeather = "Weather"
)

// StadiumMutation represents an operation that mutates the Stadium nodes in the graph.
type StadiumMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	team           *string
	fdcouk         *string
	city           *string
	stadium        *string
	capacity       *int
	addcapacity    *int
	latitude       *float64
	addlatitude    *float64
	longitude      *float64
	addlongitude   *float64
	country        *string
	clearedFields  map[string]struct{}
	weather        *uuid.UUID
	clearedweather bool
	done           bool
	oldValue       func(context.Context) (*Stadium, error)
	predicates     []predicate.Stadium
}

var _ ent.Mutation = (*StadiumMutation)(nil)

// stadiumOption allows management of the mutation configuration using functional options.
type stadiumOption func(*StadiumMutation)

// newStadiumMutation creates new mutation for the Stadium entity.
func newStadiumMutation(c config, op Op, opts ...stadiumOption) *StadiumMutation {
	m := &StadiumMutation{
		config:        c,
		op:            op,
		typ:           TypeStadium,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStadiumID sets the ID field of the mutation.
func withStadiumID(id uuid.UUID) stadiumOption {
	return func(m *StadiumMutation) {
		var (
			err   error
			once  sync.Once
			value *Stadium
		)
		m.oldValue = func(ctx context.Context) (*Stadium, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stadium.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStadium sets the old Stadium of the mutation.
func withStadium(node *Stadium) stadiumOption {
	return func(m *StadiumMutation) {
		m.oldValue = func(context.Context) (*Stadium, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StadiumMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StadiumMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Stadium entities.
func (m *StadiumMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StadiumMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StadiumMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stadium.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTeam sets the "team" field.
func (m *StadiumMutation) SetTeam(s string) {
	m.team = &s
}

// Team returns the value of the "team" field in the mutation.
func (m *StadiumMutation) Team() (r string, exists bool) {
	v := m.team
	if v == nil {
		return
	}
	return *v, true
}

// OldTeam returns the old "team" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldTeam(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTeam is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTeam requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTeam: %w", err)
	}
	return oldValue.Team, nil
}

// ResetTeam resets all changes to the "team" field.
func (m *StadiumMutation) ResetTeam() {
	m.team = nil
}

// SetFdcouk sets the "fdcouk" field.
func (m *StadiumMutation) SetFdcouk(s string) {
	m.fdcouk = &s
}

// Fdcouk returns the value of the "fdcouk" field in the mutation.
func (m *StadiumMutation) Fdcouk() (r string, exists bool) {
	v := m.fdcouk
	if v == nil {
		return
	}
	return *v, true
}

// OldFdcouk returns the old "fdcouk" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldFdcouk(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFdcouk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFdcouk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFdcouk: %w", err)
	}
	return oldValue.Fdcouk, nil
}

// ResetFdcouk resets all changes to the "fdcouk" field.
func (m *StadiumMutation) ResetFdcouk() {
	m.fdcouk = nil
}

// SetCity sets the "city" field.
func (m *StadiumMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *StadiumMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *StadiumMutation) ResetCity() {
	m.city = nil
}

// SetStadium sets the "stadium" field.
func (m *StadiumMutation) SetStadium(s string) {
	m.stadium = &s
}

// Stadium returns the value of the "stadium" field in the mutation.
func (m *StadiumMutation) Stadium() (r string, exists bool) {
	v := m.stadium
	if v == nil {
		return
	}
	return *v, true
}

// OldStadium returns the old "stadium" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldStadium(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStadium is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStadium requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStadium: %w", err)
	}
	return oldValue.Stadium, nil
}

// ResetStadium resets all changes to the "stadium" field.
func (m *StadiumMutation) ResetStadium() {
	m.stadium = nil
}

// SetCapacity sets the "capacity" field.
func (m *StadiumMutation) SetCapacity(i int) {
	m.capacity = &i
	m.addcapacity = nil
}

// Capacity returns the value of the "capacity" field in the mutation.
func (m *StadiumMutation) Capacity() (r int, exists bool) {
	v := m.capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldCapacity returns the old "capacity" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapacity: %w", err)
	}
	return oldValue.Capacity, nil
}

// AddCapacity adds i to the "capacity" field.
func (m *StadiumMutation) AddCapacity(i int) {
	if m.addcapacity != nil {
		*m.addcapacity += i
	} else {
		m.addcapacity = &i
	}
}

// AddedCapacity returns the value that was added to the "capacity" field in this mutation.
func (m *StadiumMutation) AddedCapacity() (r int, exists bool) {
	v := m.addcapacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetCapacity resets all changes to the "capacity" field.
func (m *StadiumMutation) ResetCapacity() {
	m.capacity = nil
	m.addcapacity = nil
}

// SetLatitude sets the "latitude" field.
func (m *StadiumMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *StadiumMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *StadiumMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *StadiumMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *StadiumMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *StadiumMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *StadiumMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *StadiumMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *StadiumMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *StadiumMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetCountry sets the "country" field.
func (m *StadiumMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *StadiumMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Stadium entity.
// If the Stadium object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StadiumMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *StadiumMutation) ResetCountry() {
	m.country = nil
}

// SetWeatherID sets the "weather" edge to the Weather entity by id.
func (m *StadiumMutation) SetWeatherID(id uuid.UUID) {
	m.weather = &id
}

// ClearWeather clears the "weather" edge to the Weather entity.
func (m *StadiumMutation) ClearWeather() {
	m.clearedweather = true
}

// WeatherCleared reports if the "weather" edge to the Weather entity was cleared.
func (m *StadiumMutation) WeatherCleared() bool {
	return m.clearedweather
}

// WeatherID returns the "weather" edge ID in the mutation.
func (m *StadiumMutation) WeatherID() (id uuid.UUID, exists bool) {
	if m.weather != nil {
		return *m.weather, true
	}
	return
}

// WeatherIDs returns the "weather" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WeatherID instead. It exists only for internal usage by the builders.
func (m *StadiumMutation) WeatherIDs() (ids []uuid.UUID) {
	if id := m.weather; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWeather resets all changes to the "weather" edge.
func (m *StadiumMutation) ResetWeather() {
	m.weather = nil
	m.clearedweather = false
}

// Where appends a list predicates to the StadiumMutation builder.
func (m *StadiumMutation) Where(ps ...predicate.Stadium) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StadiumMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StadiumMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Stadium, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StadiumMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StadiumMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Stadium).
func (m *StadiumMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StadiumMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.team != nil {
		fields = append(fields, stadium.FieldTeam)
	}
	if m.fdcouk != nil {
		fields = append(fields, stadium.FieldFdcouk)
	}
	if m.city != nil {
		fields = append(fields, stadium.FieldCity)
	}
	if m.stadium != nil {
		fields = append(fields, stadium.FieldStadium)
	}
	if m.capacity != nil {
		fields = append(fields, stadium.FieldCapacity)
	}
	if m.latitude != nil {
		fields = append(fields, stadium.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, stadium.FieldLongitude)
	}
	if m.country != nil {
		fields = append(fields, stadium.FieldCountry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StadiumMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stadium.FieldTeam:
		return m.Team()
	case stadium.FieldFdcouk:
		return m.Fdcouk()
	case stadium.FieldCity:
		return m.City()
	case stadium.FieldStadium:
		return m.Stadium()
	case stadium.FieldCapacity:
		return m.Capacity()
	case stadium.FieldLatitude:
		return m.Latitude()
	case stadium.FieldLongitude:
		return m.Longitude()
	case stadium.FieldCountry:
		return m.Country()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StadiumMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stadium.FieldTeam:
		return m.OldTeam(ctx)
	case stadium.FieldFdcouk:
		return m.OldFdcouk(ctx)
	case stadium.FieldCity:
		return m.OldCity(ctx)
	case stadium.FieldStadium:
		return m.OldStadium(ctx)
	case stadium.FieldCapacity:
		return m.OldCapacity(ctx)
	case stadium.FieldLatitude:
		return m.OldLatitude(ctx)
	case stadium.FieldLongitude:
		return m.OldLongitude(ctx)
	case stadium.FieldCountry:
		return m.OldCountry(ctx)
	}
	return nil, fmt.Errorf("unknown Stadium field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StadiumMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stadium.FieldTeam:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTeam(v)
		return nil
	case stadium.FieldFdcouk:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFdcouk(v)
		return nil
	case stadium.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case stadium.FieldStadium:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStadium(v)
		return nil
	case stadium.FieldCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapacity(v)
		return nil
	case stadium.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case stadium.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case stadium.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	}
	return fmt.Errorf("unknown Stadium field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StadiumMutation) AddedFields() []string {
	var fields []string
	if m.addcapacity != nil {
		fields = append(fields, stadium.FieldCapacity)
	}
	if m.addlatitude != nil {
		fields = append(fields, stadium.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, stadium.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StadiumMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stadium.FieldCapacity:
		return m.AddedCapacity()
	case stadium.FieldLatitude:
		return m.AddedLatitude()
	case stadium.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StadiumMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stadium.FieldCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCapacity(v)
		return nil
	case stadium.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case stadium.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Stadium numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StadiumMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StadiumMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StadiumMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Stadium nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StadiumMutation) ResetField(name string) error {
	switch name {
	case stadium.FieldTeam:
		m.ResetTeam()
		return nil
	case stadium.FieldFdcouk:
		m.ResetFdcouk()
		return nil
	case stadium.FieldCity:
		m.ResetCity()
		return nil
	case stadium.FieldStadium:
		m.ResetStadium()
		return nil
	case stadium.FieldCapacity:
		m.ResetCapacity()
		return nil
	case stadium.FieldLatitude:
		m.ResetLatitude()
		return nil
	case stadium.FieldLongitude:
		m.ResetLongitude()
		return nil
	case stadium.FieldCountry:
		m.ResetCountry()
		return nil
	}
	return fmt.Errorf("unknown Stadium field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StadiumMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.weather != nil {
		edges = append(edges, stadium.EdgeWeather)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StadiumMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stadium.EdgeWeather:
		if id := m.weather; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StadiumMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StadiumMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StadiumMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedweather {
		edges = append(edges, stadium.EdgeWeather)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StadiumMutation) EdgeCleared(name string) bool {
	switch name {
	case stadium.EdgeWeather:
		return m.clearedweather
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StadiumMutation) ClearEdge(name string) error {
	switch name {
	case stadium.EdgeWeather:
		m.ClearWeather()
		return nil
	}
	return fmt.Errorf("unknown Stadium unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StadiumMutation) ResetEdge(name string) error {
	switch name {
	case stadium.EdgeWeather:
		m.ResetWeather()
		return nil
	}
	return fmt.Errorf("unknown Stadium edge %s", name)
}

// WeatherMutation represents an operation that mutates the Weather nodes in the graph.
type WeatherMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	create_time    *time.Time
	update_time    *time.Time
	temperature    *float64
	addtemperature *float64
	description    *string
	clearedFields  map[string]struct{}
	stadium        *uuid.UUID
	clearedstadium bool
	done           bool
	oldValue       func(context.Context) (*Weather, error)
	predicates     []predicate.Weather
}

var _ ent.Mutation = (*WeatherMutation)(nil)

// weatherOption allows management of the mutation configuration using functional options.
type weatherOption func(*WeatherMutation)

// newWeatherMutation creates new mutation for the Weather entity.
func newWeatherMutation(c config, op Op, opts ...weatherOption) *WeatherMutation {
	m := &WeatherMutation{
		config:        c,
		op:            op,
		typ:           TypeWeather,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWeatherID sets the ID field of the mutation.
func withWeatherID(id uuid.UUID) weatherOption {
	return func(m *WeatherMutation) {
		var (
			err   error
			once  sync.Once
			value *Weather
		)
		m.oldValue = func(ctx context.Context) (*Weather, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Weather.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWeather sets the old Weather of the mutation.
func withWeather(node *Weather) weatherOption {
	return func(m *WeatherMutation) {
		m.oldValue = func(context.Context) (*Weather, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WeatherMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WeatherMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Weather entities.
func (m *WeatherMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WeatherMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WeatherMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Weather.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *WeatherMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WeatherMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WeatherMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *WeatherMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *WeatherMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *WeatherMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetTemperature sets the "temperature" field.
func (m *WeatherMutation) SetTemperature(f float64) {
	m.temperature = &f
	m.addtemperature = nil
}

// Temperature returns the value of the "temperature" field in the mutation.
func (m *WeatherMutation) Temperature() (r float64, exists bool) {
	v := m.temperature
	if v == nil {
		return
	}
	return *v, true
}

// OldTemperature returns the old "temperature" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldTemperature(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemperature is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemperature requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemperature: %w", err)
	}
	return oldValue.Temperature, nil
}

// AddTemperature adds f to the "temperature" field.
func (m *WeatherMutation) AddTemperature(f float64) {
	if m.addtemperature != nil {
		*m.addtemperature += f
	} else {
		m.addtemperature = &f
	}
}

// AddedTemperature returns the value that was added to the "temperature" field in this mutation.
func (m *WeatherMutation) AddedTemperature() (r float64, exists bool) {
	v := m.addtemperature
	if v == nil {
		return
	}
	return *v, true
}

// ResetTemperature resets all changes to the "temperature" field.
func (m *WeatherMutation) ResetTemperature() {
	m.temperature = nil
	m.addtemperature = nil
}

// SetDescription sets the "description" field.
func (m *WeatherMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WeatherMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Weather entity.
// If the Weather object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WeatherMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *WeatherMutation) ResetDescription() {
	m.description = nil
}

// SetStadiumID sets the "stadium" edge to the Stadium entity by id.
func (m *WeatherMutation) SetStadiumID(id uuid.UUID) {
	m.stadium = &id
}

// ClearStadium clears the "stadium" edge to the Stadium entity.
func (m *WeatherMutation) ClearStadium() {
	m.clearedstadium = true
}

// StadiumCleared reports if the "stadium" edge to the Stadium entity was cleared.
func (m *WeatherMutation) StadiumCleared() bool {
	return m.clearedstadium
}

// StadiumID returns the "stadium" edge ID in the mutation.
func (m *WeatherMutation) StadiumID() (id uuid.UUID, exists bool) {
	if m.stadium != nil {
		return *m.stadium, true
	}
	return
}

// StadiumIDs returns the "stadium" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StadiumID instead. It exists only for internal usage by the builders.
func (m *WeatherMutation) StadiumIDs() (ids []uuid.UUID) {
	if id := m.stadium; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStadium resets all changes to the "stadium" edge.
func (m *WeatherMutation) ResetStadium() {
	m.stadium = nil
	m.clearedstadium = false
}

// Where appends a list predicates to the WeatherMutation builder.
func (m *WeatherMutation) Where(ps ...predicate.Weather) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WeatherMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WeatherMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Weather, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WeatherMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WeatherMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Weather).
func (m *WeatherMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WeatherMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.create_time != nil {
		fields = append(fields, weather.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, weather.FieldUpdateTime)
	}
	if m.temperature != nil {
		fields = append(fields, weather.FieldTemperature)
	}
	if m.description != nil {
		fields = append(fields, weather.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WeatherMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case weather.FieldCreateTime:
		return m.CreateTime()
	case weather.FieldUpdateTime:
		return m.UpdateTime()
	case weather.FieldTemperature:
		return m.Temperature()
	case weather.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WeatherMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case weather.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case weather.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case weather.FieldTemperature:
		return m.OldTemperature(ctx)
	case weather.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Weather field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeatherMutation) SetField(name string, value ent.Value) error {
	switch name {
	case weather.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case weather.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case weather.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemperature(v)
		return nil
	case weather.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Weather field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WeatherMutation) AddedFields() []string {
	var fields []string
	if m.addtemperature != nil {
		fields = append(fields, weather.FieldTemperature)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WeatherMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case weather.FieldTemperature:
		return m.AddedTemperature()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WeatherMutation) AddField(name string, value ent.Value) error {
	switch name {
	case weather.FieldTemperature:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTemperature(v)
		return nil
	}
	return fmt.Errorf("unknown Weather numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WeatherMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WeatherMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WeatherMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Weather nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WeatherMutation) ResetField(name string) error {
	switch name {
	case weather.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case weather.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case weather.FieldTemperature:
		m.ResetTemperature()
		return nil
	case weather.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Weather field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WeatherMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.stadium != nil {
		edges = append(edges, weather.EdgeStadium)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WeatherMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case weather.EdgeStadium:
		if id := m.stadium; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WeatherMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WeatherMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WeatherMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstadium {
		edges = append(edges, weather.EdgeStadium)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WeatherMutation) EdgeCleared(name string) bool {
	switch name {
	case weather.EdgeStadium:
		return m.clearedstadium
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WeatherMutation) ClearEdge(name string) error {
	switch name {
	case weather.EdgeStadium:
		m.ClearStadium()
		return nil
	}
	return fmt.Errorf("unknown Weather unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WeatherMutation) ResetEdge(name string) error {
	switch name {
	case weather.EdgeStadium:
		m.ResetStadium()
		return nil
	}
	return fmt.Errorf("unknown Weather edge %s", name)
}
