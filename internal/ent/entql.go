// Code generated by ent, DO NOT EDIT.

package ent

import (
	"us-soccer-go-test/internal/ent/predicate"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stadium.Table,
			Columns: stadium.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: stadium.FieldID,
			},
		},
		Type: "Stadium",
		Fields: map[string]*sqlgraph.FieldSpec{
			stadium.FieldTeam:      {Type: field.TypeString, Column: stadium.FieldTeam},
			stadium.FieldFdcouk:    {Type: field.TypeString, Column: stadium.FieldFdcouk},
			stadium.FieldCity:      {Type: field.TypeString, Column: stadium.FieldCity},
			stadium.FieldStadium:   {Type: field.TypeString, Column: stadium.FieldStadium},
			stadium.FieldCapacity:  {Type: field.TypeInt, Column: stadium.FieldCapacity},
			stadium.FieldLatitude:  {Type: field.TypeFloat64, Column: stadium.FieldLatitude},
			stadium.FieldLongitude: {Type: field.TypeFloat64, Column: stadium.FieldLongitude},
			stadium.FieldCountry:   {Type: field.TypeString, Column: stadium.FieldCountry},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   weather.Table,
			Columns: weather.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: weather.FieldID,
			},
		},
		Type: "Weather",
		Fields: map[string]*sqlgraph.FieldSpec{
			weather.FieldCreateTime:  {Type: field.TypeTime, Column: weather.FieldCreateTime},
			weather.FieldUpdateTime:  {Type: field.TypeTime, Column: weather.FieldUpdateTime},
			weather.FieldTemperature: {Type: field.TypeFloat64, Column: weather.FieldTemperature},
			weather.FieldDescription: {Type: field.TypeString, Column: weather.FieldDescription},
			weather.FieldIcon:        {Type: field.TypeString, Column: weather.FieldIcon},
		},
	}
	graph.MustAddE(
		"weather",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stadium.WeatherTable,
			Columns: []string{stadium.WeatherColumn},
			Bidi:    false,
		},
		"Stadium",
		"Weather",
	)
	graph.MustAddE(
		"stadium",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weather.StadiumTable,
			Columns: []string{weather.StadiumColumn},
			Bidi:    false,
		},
		"Weather",
		"Stadium",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (sq *StadiumQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StadiumQuery builder.
func (sq *StadiumQuery) Filter() *StadiumFilter {
	return &StadiumFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StadiumMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StadiumMutation builder.
func (m *StadiumMutation) Filter() *StadiumFilter {
	return &StadiumFilter{config: m.config, predicateAdder: m}
}

// StadiumFilter provides a generic filtering capability at runtime for StadiumQuery.
type StadiumFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StadiumFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *StadiumFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(stadium.FieldID))
}

// WhereTeam applies the entql string predicate on the team field.
func (f *StadiumFilter) WhereTeam(p entql.StringP) {
	f.Where(p.Field(stadium.FieldTeam))
}

// WhereFdcouk applies the entql string predicate on the fdcouk field.
func (f *StadiumFilter) WhereFdcouk(p entql.StringP) {
	f.Where(p.Field(stadium.FieldFdcouk))
}

// WhereCity applies the entql string predicate on the city field.
func (f *StadiumFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(stadium.FieldCity))
}

// WhereStadium applies the entql string predicate on the stadium field.
func (f *StadiumFilter) WhereStadium(p entql.StringP) {
	f.Where(p.Field(stadium.FieldStadium))
}

// WhereCapacity applies the entql int predicate on the capacity field.
func (f *StadiumFilter) WhereCapacity(p entql.IntP) {
	f.Where(p.Field(stadium.FieldCapacity))
}

// WhereLatitude applies the entql float64 predicate on the latitude field.
func (f *StadiumFilter) WhereLatitude(p entql.Float64P) {
	f.Where(p.Field(stadium.FieldLatitude))
}

// WhereLongitude applies the entql float64 predicate on the longitude field.
func (f *StadiumFilter) WhereLongitude(p entql.Float64P) {
	f.Where(p.Field(stadium.FieldLongitude))
}

// WhereCountry applies the entql string predicate on the country field.
func (f *StadiumFilter) WhereCountry(p entql.StringP) {
	f.Where(p.Field(stadium.FieldCountry))
}

// WhereHasWeather applies a predicate to check if query has an edge weather.
func (f *StadiumFilter) WhereHasWeather() {
	f.Where(entql.HasEdge("weather"))
}

// WhereHasWeatherWith applies a predicate to check if query has an edge weather with a given conditions (other predicates).
func (f *StadiumFilter) WhereHasWeatherWith(preds ...predicate.Weather) {
	f.Where(entql.HasEdgeWith("weather", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wq *WeatherQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WeatherQuery builder.
func (wq *WeatherQuery) Filter() *WeatherFilter {
	return &WeatherFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WeatherMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WeatherMutation builder.
func (m *WeatherMutation) Filter() *WeatherFilter {
	return &WeatherFilter{config: m.config, predicateAdder: m}
}

// WeatherFilter provides a generic filtering capability at runtime for WeatherQuery.
type WeatherFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WeatherFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *WeatherFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(weather.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *WeatherFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(weather.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *WeatherFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(weather.FieldUpdateTime))
}

// WhereTemperature applies the entql float64 predicate on the temperature field.
func (f *WeatherFilter) WhereTemperature(p entql.Float64P) {
	f.Where(p.Field(weather.FieldTemperature))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *WeatherFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(weather.FieldDescription))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *WeatherFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(weather.FieldIcon))
}

// WhereHasStadium applies a predicate to check if query has an edge stadium.
func (f *WeatherFilter) WhereHasStadium() {
	f.Where(entql.HasEdge("stadium"))
}

// WhereHasStadiumWith applies a predicate to check if query has an edge stadium with a given conditions (other predicates).
func (f *WeatherFilter) WhereHasStadiumWith(preds ...predicate.Stadium) {
	f.Where(entql.HasEdgeWith("stadium", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
