// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Stadium is the model entity for the Stadium schema.
type Stadium struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Team holds the value of the "team" field.
	Team string `json:"team,omitempty"`
	// Fdcouk holds the value of the "fdcouk" field.
	Fdcouk string `json:"fdcouk,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Stadium holds the value of the "stadium" field.
	Stadium string `json:"stadium,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// Latitude holds the value of the "latitude" field.
	Latitude float64 `json:"latitude,omitempty"`
	// Longitude holds the value of the "longitude" field.
	Longitude float64 `json:"longitude,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StadiumQuery when eager-loading is set.
	Edges        StadiumEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StadiumEdges holds the relations/edges for other nodes in the graph.
type StadiumEdges struct {
	// Weather holds the value of the weather edge.
	Weather *Weather `json:"weather,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WeatherOrErr returns the Weather value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StadiumEdges) WeatherOrErr() (*Weather, error) {
	if e.Weather != nil {
		return e.Weather, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: weather.Label}
	}
	return nil, &NotLoadedError{edge: "weather"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stadium) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stadium.FieldLatitude, stadium.FieldLongitude:
			values[i] = new(sql.NullFloat64)
		case stadium.FieldCapacity:
			values[i] = new(sql.NullInt64)
		case stadium.FieldTeam, stadium.FieldFdcouk, stadium.FieldCity, stadium.FieldStadium, stadium.FieldCountry:
			values[i] = new(sql.NullString)
		case stadium.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stadium fields.
func (s *Stadium) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stadium.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case stadium.FieldTeam:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field team", values[i])
			} else if value.Valid {
				s.Team = value.String
			}
		case stadium.FieldFdcouk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fdcouk", values[i])
			} else if value.Valid {
				s.Fdcouk = value.String
			}
		case stadium.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				s.City = value.String
			}
		case stadium.FieldStadium:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stadium", values[i])
			} else if value.Valid {
				s.Stadium = value.String
			}
		case stadium.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				s.Capacity = int(value.Int64)
			}
		case stadium.FieldLatitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field latitude", values[i])
			} else if value.Valid {
				s.Latitude = value.Float64
			}
		case stadium.FieldLongitude:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field longitude", values[i])
			} else if value.Valid {
				s.Longitude = value.Float64
			}
		case stadium.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				s.Country = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Stadium.
// This includes values selected through modifiers, order, etc.
func (s *Stadium) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryWeather queries the "weather" edge of the Stadium entity.
func (s *Stadium) QueryWeather() *WeatherQuery {
	return NewStadiumClient(s.config).QueryWeather(s)
}

// Update returns a builder for updating this Stadium.
// Note that you need to call Stadium.Unwrap() before calling this method if this Stadium
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stadium) Update() *StadiumUpdateOne {
	return NewStadiumClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Stadium entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stadium) Unwrap() *Stadium {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stadium is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stadium) String() string {
	var builder strings.Builder
	builder.WriteString("Stadium(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("team=")
	builder.WriteString(s.Team)
	builder.WriteString(", ")
	builder.WriteString("fdcouk=")
	builder.WriteString(s.Fdcouk)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(s.City)
	builder.WriteString(", ")
	builder.WriteString("stadium=")
	builder.WriteString(s.Stadium)
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", s.Capacity))
	builder.WriteString(", ")
	builder.WriteString("latitude=")
	builder.WriteString(fmt.Sprintf("%v", s.Latitude))
	builder.WriteString(", ")
	builder.WriteString("longitude=")
	builder.WriteString(fmt.Sprintf("%v", s.Longitude))
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(s.Country)
	builder.WriteByte(')')
	return builder.String()
}

// Stadia is a parsable slice of Stadium.
type Stadia []*Stadium
