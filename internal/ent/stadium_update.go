// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"us-soccer-go-test/internal/ent/predicate"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StadiumUpdate is the builder for updating Stadium entities.
type StadiumUpdate struct {
	config
	hooks     []Hook
	mutation  *StadiumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StadiumUpdate builder.
func (su *StadiumUpdate) Where(ps ...predicate.Stadium) *StadiumUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTeam sets the "team" field.
func (su *StadiumUpdate) SetTeam(s string) *StadiumUpdate {
	su.mutation.SetTeam(s)
	return su
}

// SetNillableTeam sets the "team" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableTeam(s *string) *StadiumUpdate {
	if s != nil {
		su.SetTeam(*s)
	}
	return su
}

// SetFdcouk sets the "fdcouk" field.
func (su *StadiumUpdate) SetFdcouk(s string) *StadiumUpdate {
	su.mutation.SetFdcouk(s)
	return su
}

// SetNillableFdcouk sets the "fdcouk" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableFdcouk(s *string) *StadiumUpdate {
	if s != nil {
		su.SetFdcouk(*s)
	}
	return su
}

// SetCity sets the "city" field.
func (su *StadiumUpdate) SetCity(s string) *StadiumUpdate {
	su.mutation.SetCity(s)
	return su
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableCity(s *string) *StadiumUpdate {
	if s != nil {
		su.SetCity(*s)
	}
	return su
}

// SetStadium sets the "stadium" field.
func (su *StadiumUpdate) SetStadium(s string) *StadiumUpdate {
	su.mutation.SetStadium(s)
	return su
}

// SetNillableStadium sets the "stadium" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableStadium(s *string) *StadiumUpdate {
	if s != nil {
		su.SetStadium(*s)
	}
	return su
}

// SetCapacity sets the "capacity" field.
func (su *StadiumUpdate) SetCapacity(i int) *StadiumUpdate {
	su.mutation.ResetCapacity()
	su.mutation.SetCapacity(i)
	return su
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableCapacity(i *int) *StadiumUpdate {
	if i != nil {
		su.SetCapacity(*i)
	}
	return su
}

// AddCapacity adds i to the "capacity" field.
func (su *StadiumUpdate) AddCapacity(i int) *StadiumUpdate {
	su.mutation.AddCapacity(i)
	return su
}

// SetLatitude sets the "latitude" field.
func (su *StadiumUpdate) SetLatitude(f float64) *StadiumUpdate {
	su.mutation.ResetLatitude()
	su.mutation.SetLatitude(f)
	return su
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableLatitude(f *float64) *StadiumUpdate {
	if f != nil {
		su.SetLatitude(*f)
	}
	return su
}

// AddLatitude adds f to the "latitude" field.
func (su *StadiumUpdate) AddLatitude(f float64) *StadiumUpdate {
	su.mutation.AddLatitude(f)
	return su
}

// SetLongitude sets the "longitude" field.
func (su *StadiumUpdate) SetLongitude(f float64) *StadiumUpdate {
	su.mutation.ResetLongitude()
	su.mutation.SetLongitude(f)
	return su
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableLongitude(f *float64) *StadiumUpdate {
	if f != nil {
		su.SetLongitude(*f)
	}
	return su
}

// AddLongitude adds f to the "longitude" field.
func (su *StadiumUpdate) AddLongitude(f float64) *StadiumUpdate {
	su.mutation.AddLongitude(f)
	return su
}

// SetCountry sets the "country" field.
func (su *StadiumUpdate) SetCountry(s string) *StadiumUpdate {
	su.mutation.SetCountry(s)
	return su
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (su *StadiumUpdate) SetNillableCountry(s *string) *StadiumUpdate {
	if s != nil {
		su.SetCountry(*s)
	}
	return su
}

// SetWeatherID sets the "weather" edge to the Weather entity by ID.
func (su *StadiumUpdate) SetWeatherID(id uuid.UUID) *StadiumUpdate {
	su.mutation.SetWeatherID(id)
	return su
}

// SetNillableWeatherID sets the "weather" edge to the Weather entity by ID if the given value is not nil.
func (su *StadiumUpdate) SetNillableWeatherID(id *uuid.UUID) *StadiumUpdate {
	if id != nil {
		su = su.SetWeatherID(*id)
	}
	return su
}

// SetWeather sets the "weather" edge to the Weather entity.
func (su *StadiumUpdate) SetWeather(w *Weather) *StadiumUpdate {
	return su.SetWeatherID(w.ID)
}

// Mutation returns the StadiumMutation object of the builder.
func (su *StadiumUpdate) Mutation() *StadiumMutation {
	return su.mutation
}

// ClearWeather clears the "weather" edge to the Weather entity.
func (su *StadiumUpdate) ClearWeather() *StadiumUpdate {
	su.mutation.ClearWeather()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StadiumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StadiumUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StadiumUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StadiumUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StadiumUpdate) check() error {
	if v, ok := su.mutation.Team(); ok {
		if err := stadium.TeamValidator(v); err != nil {
			return &ValidationError{Name: "team", err: fmt.Errorf(`ent: validator failed for field "Stadium.team": %w`, err)}
		}
	}
	if v, ok := su.mutation.Fdcouk(); ok {
		if err := stadium.FdcoukValidator(v); err != nil {
			return &ValidationError{Name: "fdcouk", err: fmt.Errorf(`ent: validator failed for field "Stadium.fdcouk": %w`, err)}
		}
	}
	if v, ok := su.mutation.City(); ok {
		if err := stadium.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Stadium.city": %w`, err)}
		}
	}
	if v, ok := su.mutation.Stadium(); ok {
		if err := stadium.StadiumValidator(v); err != nil {
			return &ValidationError{Name: "stadium", err: fmt.Errorf(`ent: validator failed for field "Stadium.stadium": %w`, err)}
		}
	}
	if v, ok := su.mutation.Country(); ok {
		if err := stadium.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Stadium.country": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StadiumUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StadiumUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StadiumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stadium.Table, stadium.Columns, sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Team(); ok {
		_spec.SetField(stadium.FieldTeam, field.TypeString, value)
	}
	if value, ok := su.mutation.Fdcouk(); ok {
		_spec.SetField(stadium.FieldFdcouk, field.TypeString, value)
	}
	if value, ok := su.mutation.City(); ok {
		_spec.SetField(stadium.FieldCity, field.TypeString, value)
	}
	if value, ok := su.mutation.Stadium(); ok {
		_spec.SetField(stadium.FieldStadium, field.TypeString, value)
	}
	if value, ok := su.mutation.Capacity(); ok {
		_spec.SetField(stadium.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedCapacity(); ok {
		_spec.AddField(stadium.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := su.mutation.Latitude(); ok {
		_spec.SetField(stadium.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLatitude(); ok {
		_spec.AddField(stadium.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Longitude(); ok {
		_spec.SetField(stadium.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLongitude(); ok {
		_spec.AddField(stadium.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Country(); ok {
		_spec.SetField(stadium.FieldCountry, field.TypeString, value)
	}
	if su.mutation.WeatherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stadium.WeatherTable,
			Columns: []string{stadium.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WeatherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stadium.WeatherTable,
			Columns: []string{stadium.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stadium.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StadiumUpdateOne is the builder for updating a single Stadium entity.
type StadiumUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StadiumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetTeam sets the "team" field.
func (suo *StadiumUpdateOne) SetTeam(s string) *StadiumUpdateOne {
	suo.mutation.SetTeam(s)
	return suo
}

// SetNillableTeam sets the "team" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableTeam(s *string) *StadiumUpdateOne {
	if s != nil {
		suo.SetTeam(*s)
	}
	return suo
}

// SetFdcouk sets the "fdcouk" field.
func (suo *StadiumUpdateOne) SetFdcouk(s string) *StadiumUpdateOne {
	suo.mutation.SetFdcouk(s)
	return suo
}

// SetNillableFdcouk sets the "fdcouk" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableFdcouk(s *string) *StadiumUpdateOne {
	if s != nil {
		suo.SetFdcouk(*s)
	}
	return suo
}

// SetCity sets the "city" field.
func (suo *StadiumUpdateOne) SetCity(s string) *StadiumUpdateOne {
	suo.mutation.SetCity(s)
	return suo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableCity(s *string) *StadiumUpdateOne {
	if s != nil {
		suo.SetCity(*s)
	}
	return suo
}

// SetStadium sets the "stadium" field.
func (suo *StadiumUpdateOne) SetStadium(s string) *StadiumUpdateOne {
	suo.mutation.SetStadium(s)
	return suo
}

// SetNillableStadium sets the "stadium" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableStadium(s *string) *StadiumUpdateOne {
	if s != nil {
		suo.SetStadium(*s)
	}
	return suo
}

// SetCapacity sets the "capacity" field.
func (suo *StadiumUpdateOne) SetCapacity(i int) *StadiumUpdateOne {
	suo.mutation.ResetCapacity()
	suo.mutation.SetCapacity(i)
	return suo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableCapacity(i *int) *StadiumUpdateOne {
	if i != nil {
		suo.SetCapacity(*i)
	}
	return suo
}

// AddCapacity adds i to the "capacity" field.
func (suo *StadiumUpdateOne) AddCapacity(i int) *StadiumUpdateOne {
	suo.mutation.AddCapacity(i)
	return suo
}

// SetLatitude sets the "latitude" field.
func (suo *StadiumUpdateOne) SetLatitude(f float64) *StadiumUpdateOne {
	suo.mutation.ResetLatitude()
	suo.mutation.SetLatitude(f)
	return suo
}

// SetNillableLatitude sets the "latitude" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableLatitude(f *float64) *StadiumUpdateOne {
	if f != nil {
		suo.SetLatitude(*f)
	}
	return suo
}

// AddLatitude adds f to the "latitude" field.
func (suo *StadiumUpdateOne) AddLatitude(f float64) *StadiumUpdateOne {
	suo.mutation.AddLatitude(f)
	return suo
}

// SetLongitude sets the "longitude" field.
func (suo *StadiumUpdateOne) SetLongitude(f float64) *StadiumUpdateOne {
	suo.mutation.ResetLongitude()
	suo.mutation.SetLongitude(f)
	return suo
}

// SetNillableLongitude sets the "longitude" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableLongitude(f *float64) *StadiumUpdateOne {
	if f != nil {
		suo.SetLongitude(*f)
	}
	return suo
}

// AddLongitude adds f to the "longitude" field.
func (suo *StadiumUpdateOne) AddLongitude(f float64) *StadiumUpdateOne {
	suo.mutation.AddLongitude(f)
	return suo
}

// SetCountry sets the "country" field.
func (suo *StadiumUpdateOne) SetCountry(s string) *StadiumUpdateOne {
	suo.mutation.SetCountry(s)
	return suo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableCountry(s *string) *StadiumUpdateOne {
	if s != nil {
		suo.SetCountry(*s)
	}
	return suo
}

// SetWeatherID sets the "weather" edge to the Weather entity by ID.
func (suo *StadiumUpdateOne) SetWeatherID(id uuid.UUID) *StadiumUpdateOne {
	suo.mutation.SetWeatherID(id)
	return suo
}

// SetNillableWeatherID sets the "weather" edge to the Weather entity by ID if the given value is not nil.
func (suo *StadiumUpdateOne) SetNillableWeatherID(id *uuid.UUID) *StadiumUpdateOne {
	if id != nil {
		suo = suo.SetWeatherID(*id)
	}
	return suo
}

// SetWeather sets the "weather" edge to the Weather entity.
func (suo *StadiumUpdateOne) SetWeather(w *Weather) *StadiumUpdateOne {
	return suo.SetWeatherID(w.ID)
}

// Mutation returns the StadiumMutation object of the builder.
func (suo *StadiumUpdateOne) Mutation() *StadiumMutation {
	return suo.mutation
}

// ClearWeather clears the "weather" edge to the Weather entity.
func (suo *StadiumUpdateOne) ClearWeather() *StadiumUpdateOne {
	suo.mutation.ClearWeather()
	return suo
}

// Where appends a list predicates to the StadiumUpdate builder.
func (suo *StadiumUpdateOne) Where(ps ...predicate.Stadium) *StadiumUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StadiumUpdateOne) Select(field string, fields ...string) *StadiumUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stadium entity.
func (suo *StadiumUpdateOne) Save(ctx context.Context) (*Stadium, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StadiumUpdateOne) SaveX(ctx context.Context) *Stadium {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StadiumUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StadiumUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StadiumUpdateOne) check() error {
	if v, ok := suo.mutation.Team(); ok {
		if err := stadium.TeamValidator(v); err != nil {
			return &ValidationError{Name: "team", err: fmt.Errorf(`ent: validator failed for field "Stadium.team": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Fdcouk(); ok {
		if err := stadium.FdcoukValidator(v); err != nil {
			return &ValidationError{Name: "fdcouk", err: fmt.Errorf(`ent: validator failed for field "Stadium.fdcouk": %w`, err)}
		}
	}
	if v, ok := suo.mutation.City(); ok {
		if err := stadium.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Stadium.city": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Stadium(); ok {
		if err := stadium.StadiumValidator(v); err != nil {
			return &ValidationError{Name: "stadium", err: fmt.Errorf(`ent: validator failed for field "Stadium.stadium": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Country(); ok {
		if err := stadium.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "Stadium.country": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StadiumUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StadiumUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StadiumUpdateOne) sqlSave(ctx context.Context) (_node *Stadium, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stadium.Table, stadium.Columns, sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stadium.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stadium.FieldID)
		for _, f := range fields {
			if !stadium.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stadium.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Team(); ok {
		_spec.SetField(stadium.FieldTeam, field.TypeString, value)
	}
	if value, ok := suo.mutation.Fdcouk(); ok {
		_spec.SetField(stadium.FieldFdcouk, field.TypeString, value)
	}
	if value, ok := suo.mutation.City(); ok {
		_spec.SetField(stadium.FieldCity, field.TypeString, value)
	}
	if value, ok := suo.mutation.Stadium(); ok {
		_spec.SetField(stadium.FieldStadium, field.TypeString, value)
	}
	if value, ok := suo.mutation.Capacity(); ok {
		_spec.SetField(stadium.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedCapacity(); ok {
		_spec.AddField(stadium.FieldCapacity, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Latitude(); ok {
		_spec.SetField(stadium.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLatitude(); ok {
		_spec.AddField(stadium.FieldLatitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Longitude(); ok {
		_spec.SetField(stadium.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLongitude(); ok {
		_spec.AddField(stadium.FieldLongitude, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Country(); ok {
		_spec.SetField(stadium.FieldCountry, field.TypeString, value)
	}
	if suo.mutation.WeatherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stadium.WeatherTable,
			Columns: []string{stadium.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WeatherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stadium.WeatherTable,
			Columns: []string{stadium.WeatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Stadium{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stadium.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
