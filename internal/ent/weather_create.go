// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WeatherCreate is the builder for creating a Weather entity.
type WeatherCreate struct {
	config
	mutation *WeatherMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (wc *WeatherCreate) SetCreateTime(t time.Time) *WeatherCreate {
	wc.mutation.SetCreateTime(t)
	return wc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wc *WeatherCreate) SetNillableCreateTime(t *time.Time) *WeatherCreate {
	if t != nil {
		wc.SetCreateTime(*t)
	}
	return wc
}

// SetUpdateTime sets the "update_time" field.
func (wc *WeatherCreate) SetUpdateTime(t time.Time) *WeatherCreate {
	wc.mutation.SetUpdateTime(t)
	return wc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (wc *WeatherCreate) SetNillableUpdateTime(t *time.Time) *WeatherCreate {
	if t != nil {
		wc.SetUpdateTime(*t)
	}
	return wc
}

// SetTemperature sets the "temperature" field.
func (wc *WeatherCreate) SetTemperature(f float64) *WeatherCreate {
	wc.mutation.SetTemperature(f)
	return wc
}

// SetDescription sets the "description" field.
func (wc *WeatherCreate) SetDescription(s string) *WeatherCreate {
	wc.mutation.SetDescription(s)
	return wc
}

// SetID sets the "id" field.
func (wc *WeatherCreate) SetID(u uuid.UUID) *WeatherCreate {
	wc.mutation.SetID(u)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WeatherCreate) SetNillableID(u *uuid.UUID) *WeatherCreate {
	if u != nil {
		wc.SetID(*u)
	}
	return wc
}

// SetStadiumID sets the "stadium" edge to the Stadium entity by ID.
func (wc *WeatherCreate) SetStadiumID(id uuid.UUID) *WeatherCreate {
	wc.mutation.SetStadiumID(id)
	return wc
}

// SetNillableStadiumID sets the "stadium" edge to the Stadium entity by ID if the given value is not nil.
func (wc *WeatherCreate) SetNillableStadiumID(id *uuid.UUID) *WeatherCreate {
	if id != nil {
		wc = wc.SetStadiumID(*id)
	}
	return wc
}

// SetStadium sets the "stadium" edge to the Stadium entity.
func (wc *WeatherCreate) SetStadium(s *Stadium) *WeatherCreate {
	return wc.SetStadiumID(s.ID)
}

// Mutation returns the WeatherMutation object of the builder.
func (wc *WeatherCreate) Mutation() *WeatherMutation {
	return wc.mutation
}

// Save creates the Weather in the database.
func (wc *WeatherCreate) Save(ctx context.Context) (*Weather, error) {
	if err := wc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WeatherCreate) SaveX(ctx context.Context) *Weather {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WeatherCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WeatherCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WeatherCreate) defaults() error {
	if _, ok := wc.mutation.CreateTime(); !ok {
		if weather.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized weather.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := weather.DefaultCreateTime()
		wc.mutation.SetCreateTime(v)
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		if weather.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized weather.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := weather.DefaultUpdateTime()
		wc.mutation.SetUpdateTime(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		if weather.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized weather.DefaultID (forgotten import ent/runtime?)")
		}
		v := weather.DefaultID()
		wc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wc *WeatherCreate) check() error {
	if _, ok := wc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Weather.create_time"`)}
	}
	if _, ok := wc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Weather.update_time"`)}
	}
	if _, ok := wc.mutation.Temperature(); !ok {
		return &ValidationError{Name: "temperature", err: errors.New(`ent: missing required field "Weather.temperature"`)}
	}
	if _, ok := wc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Weather.description"`)}
	}
	if v, ok := wc.mutation.Description(); ok {
		if err := weather.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Weather.description": %w`, err)}
		}
	}
	return nil
}

func (wc *WeatherCreate) sqlSave(ctx context.Context) (*Weather, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WeatherCreate) createSpec() (*Weather, *sqlgraph.CreateSpec) {
	var (
		_node = &Weather{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(weather.Table, sqlgraph.NewFieldSpec(weather.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.CreateTime(); ok {
		_spec.SetField(weather.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := wc.mutation.UpdateTime(); ok {
		_spec.SetField(weather.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := wc.mutation.Temperature(); ok {
		_spec.SetField(weather.FieldTemperature, field.TypeFloat64, value)
		_node.Temperature = value
	}
	if value, ok := wc.mutation.Description(); ok {
		_spec.SetField(weather.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := wc.mutation.StadiumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weather.StadiumTable,
			Columns: []string{weather.StadiumColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stadium.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.stadium_weather = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Weather.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WeatherUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (wc *WeatherCreate) OnConflict(opts ...sql.ConflictOption) *WeatherUpsertOne {
	wc.conflict = opts
	return &WeatherUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Weather.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WeatherCreate) OnConflictColumns(columns ...string) *WeatherUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WeatherUpsertOne{
		create: wc,
	}
}

type (
	// WeatherUpsertOne is the builder for "upsert"-ing
	//  one Weather node.
	WeatherUpsertOne struct {
		create *WeatherCreate
	}

	// WeatherUpsert is the "OnConflict" setter.
	WeatherUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *WeatherUpsert) SetUpdateTime(v time.Time) *WeatherUpsert {
	u.Set(weather.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WeatherUpsert) UpdateUpdateTime() *WeatherUpsert {
	u.SetExcluded(weather.FieldUpdateTime)
	return u
}

// SetTemperature sets the "temperature" field.
func (u *WeatherUpsert) SetTemperature(v float64) *WeatherUpsert {
	u.Set(weather.FieldTemperature, v)
	return u
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *WeatherUpsert) UpdateTemperature() *WeatherUpsert {
	u.SetExcluded(weather.FieldTemperature)
	return u
}

// AddTemperature adds v to the "temperature" field.
func (u *WeatherUpsert) AddTemperature(v float64) *WeatherUpsert {
	u.Add(weather.FieldTemperature, v)
	return u
}

// SetDescription sets the "description" field.
func (u *WeatherUpsert) SetDescription(v string) *WeatherUpsert {
	u.Set(weather.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WeatherUpsert) UpdateDescription() *WeatherUpsert {
	u.SetExcluded(weather.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Weather.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(weather.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WeatherUpsertOne) UpdateNewValues() *WeatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(weather.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(weather.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Weather.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WeatherUpsertOne) Ignore() *WeatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WeatherUpsertOne) DoNothing() *WeatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WeatherCreate.OnConflict
// documentation for more info.
func (u *WeatherUpsertOne) Update(set func(*WeatherUpsert)) *WeatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WeatherUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WeatherUpsertOne) SetUpdateTime(v time.Time) *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WeatherUpsertOne) UpdateUpdateTime() *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTemperature sets the "temperature" field.
func (u *WeatherUpsertOne) SetTemperature(v float64) *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *WeatherUpsertOne) AddTemperature(v float64) *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *WeatherUpsertOne) UpdateTemperature() *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.UpdateTemperature()
	})
}

// SetDescription sets the "description" field.
func (u *WeatherUpsertOne) SetDescription(v string) *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WeatherUpsertOne) UpdateDescription() *WeatherUpsertOne {
	return u.Update(func(s *WeatherUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *WeatherUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WeatherCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WeatherUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WeatherUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WeatherUpsertOne.ID is not supported by MySQL driver. Use WeatherUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WeatherUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WeatherCreateBulk is the builder for creating many Weather entities in bulk.
type WeatherCreateBulk struct {
	config
	err      error
	builders []*WeatherCreate
	conflict []sql.ConflictOption
}

// Save creates the Weather entities in the database.
func (wcb *WeatherCreateBulk) Save(ctx context.Context) ([]*Weather, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Weather, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WeatherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WeatherCreateBulk) SaveX(ctx context.Context) []*Weather {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WeatherCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WeatherCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Weather.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WeatherUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (wcb *WeatherCreateBulk) OnConflict(opts ...sql.ConflictOption) *WeatherUpsertBulk {
	wcb.conflict = opts
	return &WeatherUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Weather.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WeatherCreateBulk) OnConflictColumns(columns ...string) *WeatherUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WeatherUpsertBulk{
		create: wcb,
	}
}

// WeatherUpsertBulk is the builder for "upsert"-ing
// a bulk of Weather nodes.
type WeatherUpsertBulk struct {
	create *WeatherCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Weather.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(weather.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WeatherUpsertBulk) UpdateNewValues() *WeatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(weather.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(weather.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Weather.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WeatherUpsertBulk) Ignore() *WeatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WeatherUpsertBulk) DoNothing() *WeatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WeatherCreateBulk.OnConflict
// documentation for more info.
func (u *WeatherUpsertBulk) Update(set func(*WeatherUpsert)) *WeatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WeatherUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *WeatherUpsertBulk) SetUpdateTime(v time.Time) *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *WeatherUpsertBulk) UpdateUpdateTime() *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTemperature sets the "temperature" field.
func (u *WeatherUpsertBulk) SetTemperature(v float64) *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *WeatherUpsertBulk) AddTemperature(v float64) *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *WeatherUpsertBulk) UpdateTemperature() *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.UpdateTemperature()
	})
}

// SetDescription sets the "description" field.
func (u *WeatherUpsertBulk) SetDescription(v string) *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WeatherUpsertBulk) UpdateDescription() *WeatherUpsertBulk {
	return u.Update(func(s *WeatherUpsert) {
		s.UpdateDescription()
	})
}

// Exec executes the query.
func (u *WeatherUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WeatherCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WeatherCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WeatherUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
