// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"
	"us-soccer-go-test/internal/database/schema"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	stadium.Policy = privacy.NewPolicies(schema.Stadium{})
	stadium.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := stadium.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	stadiumFields := schema.Stadium{}.Fields()
	_ = stadiumFields
	// stadiumDescTeam is the schema descriptor for team field.
	stadiumDescTeam := stadiumFields[1].Descriptor()
	// stadium.TeamValidator is a validator for the "team" field. It is called by the builders before save.
	stadium.TeamValidator = stadiumDescTeam.Validators[0].(func(string) error)
	// stadiumDescFdcouk is the schema descriptor for fdcouk field.
	stadiumDescFdcouk := stadiumFields[2].Descriptor()
	// stadium.FdcoukValidator is a validator for the "fdcouk" field. It is called by the builders before save.
	stadium.FdcoukValidator = stadiumDescFdcouk.Validators[0].(func(string) error)
	// stadiumDescCity is the schema descriptor for city field.
	stadiumDescCity := stadiumFields[3].Descriptor()
	// stadium.CityValidator is a validator for the "city" field. It is called by the builders before save.
	stadium.CityValidator = stadiumDescCity.Validators[0].(func(string) error)
	// stadiumDescStadium is the schema descriptor for stadium field.
	stadiumDescStadium := stadiumFields[4].Descriptor()
	// stadium.StadiumValidator is a validator for the "stadium" field. It is called by the builders before save.
	stadium.StadiumValidator = stadiumDescStadium.Validators[0].(func(string) error)
	// stadiumDescCountry is the schema descriptor for country field.
	stadiumDescCountry := stadiumFields[8].Descriptor()
	// stadium.CountryValidator is a validator for the "country" field. It is called by the builders before save.
	stadium.CountryValidator = stadiumDescCountry.Validators[0].(func(string) error)
	// stadiumDescID is the schema descriptor for id field.
	stadiumDescID := stadiumFields[0].Descriptor()
	// stadium.DefaultID holds the default value on creation for the id field.
	stadium.DefaultID = stadiumDescID.Default.(func() uuid.UUID)
	weatherMixin := schema.Weather{}.Mixin()
	weather.Policy = privacy.NewPolicies(schema.Weather{})
	weather.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := weather.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	weatherMixinFields0 := weatherMixin[0].Fields()
	_ = weatherMixinFields0
	weatherFields := schema.Weather{}.Fields()
	_ = weatherFields
	// weatherDescCreateTime is the schema descriptor for create_time field.
	weatherDescCreateTime := weatherMixinFields0[0].Descriptor()
	// weather.DefaultCreateTime holds the default value on creation for the create_time field.
	weather.DefaultCreateTime = weatherDescCreateTime.Default.(func() time.Time)
	// weatherDescUpdateTime is the schema descriptor for update_time field.
	weatherDescUpdateTime := weatherMixinFields0[1].Descriptor()
	// weather.DefaultUpdateTime holds the default value on creation for the update_time field.
	weather.DefaultUpdateTime = weatherDescUpdateTime.Default.(func() time.Time)
	// weather.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	weather.UpdateDefaultUpdateTime = weatherDescUpdateTime.UpdateDefault.(func() time.Time)
	// weatherDescDescription is the schema descriptor for description field.
	weatherDescDescription := weatherFields[2].Descriptor()
	// weather.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	weather.DescriptionValidator = weatherDescDescription.Validators[0].(func(string) error)
	// weatherDescIcon is the schema descriptor for icon field.
	weatherDescIcon := weatherFields[3].Descriptor()
	// weather.DefaultIcon holds the default value on creation for the icon field.
	weather.DefaultIcon = weatherDescIcon.Default.(string)
	// weatherDescID is the schema descriptor for id field.
	weatherDescID := weatherFields[0].Descriptor()
	// weather.DefaultID holds the default value on creation for the id field.
	weather.DefaultID = weatherDescID.Default.(func() uuid.UUID)
}

const (
	Version = "v0.13.1"                                         // Version of ent codegen.
	Sum     = "h1:uD8QwN1h6SNphdCCzmkMN3feSUzNnVvV/WIkHKMbzOE=" // Sum of ent codegen.
)
