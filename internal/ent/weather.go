// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"us-soccer-go-test/internal/ent/stadium"
	"us-soccer-go-test/internal/ent/weather"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Weather is the model entity for the Weather schema.
type Weather struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Temperature holds the value of the "temperature" field.
	Temperature float64 `json:"temperature,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeatherQuery when eager-loading is set.
	Edges           WeatherEdges `json:"edges"`
	stadium_weather *uuid.UUID
	selectValues    sql.SelectValues
}

// WeatherEdges holds the relations/edges for other nodes in the graph.
type WeatherEdges struct {
	// Stadium holds the value of the stadium edge.
	Stadium *Stadium `json:"stadium,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StadiumOrErr returns the Stadium value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeatherEdges) StadiumOrErr() (*Stadium, error) {
	if e.Stadium != nil {
		return e.Stadium, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: stadium.Label}
	}
	return nil, &NotLoadedError{edge: "stadium"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weather) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case weather.FieldTemperature:
			values[i] = new(sql.NullFloat64)
		case weather.FieldDescription:
			values[i] = new(sql.NullString)
		case weather.FieldCreateTime, weather.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case weather.FieldID:
			values[i] = new(uuid.UUID)
		case weather.ForeignKeys[0]: // stadium_weather
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weather fields.
func (w *Weather) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case weather.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case weather.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				w.CreateTime = value.Time
			}
		case weather.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				w.UpdateTime = value.Time
			}
		case weather.FieldTemperature:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field temperature", values[i])
			} else if value.Valid {
				w.Temperature = value.Float64
			}
		case weather.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		case weather.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field stadium_weather", values[i])
			} else if value.Valid {
				w.stadium_weather = new(uuid.UUID)
				*w.stadium_weather = *value.S.(*uuid.UUID)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Weather.
// This includes values selected through modifiers, order, etc.
func (w *Weather) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryStadium queries the "stadium" edge of the Weather entity.
func (w *Weather) QueryStadium() *StadiumQuery {
	return NewWeatherClient(w.config).QueryStadium(w)
}

// Update returns a builder for updating this Weather.
// Note that you need to call Weather.Unwrap() before calling this method if this Weather
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weather) Update() *WeatherUpdateOne {
	return NewWeatherClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Weather entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Weather) Unwrap() *Weather {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weather is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weather) String() string {
	var builder strings.Builder
	builder.WriteString("Weather(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("create_time=")
	builder.WriteString(w.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(w.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("temperature=")
	builder.WriteString(fmt.Sprintf("%v", w.Temperature))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Weathers is a parsable slice of Weather.
type Weathers []*Weather
